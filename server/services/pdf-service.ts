import jsPDF from 'jspdf';
import QRCode from 'qrcode';

export interface TicketData {
  eventName: string;
  eventDate: string;
  eventTime: string;
  eventLocation: string;
  participantName: string;
  registrationId: string;
  qrCodeData: string;
  organizationName?: string;
  ticketType?: string;
  seatInfo?: string;
  instructions?: string[];
}

class PDFService {
  /**
   * Generate event ticket PDF
   */
  async generateEventTicket(ticketData: TicketData): Promise<Buffer> {
    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.getWidth();
      const pageHeight = doc.internal.pageSize.getHeight();
      
      // Colors
      const primaryColor = '#4F46E5';
      const textColor = '#374151';
      const lightGray = '#F3F4F6';
      
      // Header
      doc.setFillColor(79, 70, 229); // Primary color
      doc.rect(0, 0, pageWidth, 25, 'F');
      
      // Logo/Title
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.text('EventValidate', 20, 16);
      
      // Ticket label
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text('EVENT TICKET', pageWidth - 70, 16);
      
      // Reset text color
      doc.setTextColor(55, 65, 81); // textColor
      
      // Event Title
      doc.setFontSize(18);
      doc.setFont('helvetica', 'bold');
      doc.text(ticketData.eventName, 20, 45);
      
      // Participant Name
      doc.setFontSize(14);
      doc.setFont('helvetica', 'normal');
      doc.text(`Attendee: ${ticketData.participantName}`, 20, 60);
      
      // Registration ID
      doc.setFontSize(10);
      doc.text(`Registration ID: ${ticketData.registrationId}`, 20, 70);
      
      // Event Details Box
      doc.setFillColor(243, 244, 246); // lightGray
      doc.rect(20, 80, pageWidth - 40, 40, 'F');
      doc.rect(20, 80, pageWidth - 40, 40, 'S');
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text('Event Details', 25, 90);
      
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(10);
      doc.text(`Date: ${ticketData.eventDate}`, 25, 100);
      doc.text(`Time: ${ticketData.eventTime}`, 25, 110);
      doc.text(`Location: ${ticketData.eventLocation}`, 25, 115);
      
      if (ticketData.organizationName) {
        doc.text(`Organizer: ${ticketData.organizationName}`, 120, 100);
      }
      
      if (ticketData.ticketType) {
        doc.text(`Ticket Type: ${ticketData.ticketType}`, 120, 110);
      }
      
      if (ticketData.seatInfo) {
        doc.text(`Seat: ${ticketData.seatInfo}`, 120, 115);
      }
      
      // QR Code
      const qrCodeDataURL = await QRCode.toDataURL(ticketData.qrCodeData, {
        errorCorrectionLevel: 'M',
        width: 120,
        margin: 1
      });
      
      // Position QR code on the right side
      doc.addImage(qrCodeDataURL, 'PNG', pageWidth - 70, 130, 50, 50);
      
      // QR Code label
      doc.setFontSize(10);
      doc.text('Scan for entry', pageWidth - 65, 190);
      
      // Instructions
      doc.setFontSize(12);
      doc.setFont('helvetica', 'bold');
      doc.text('Important Instructions:', 20, 140);
      
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(10);
      
      const defaultInstructions = [
        '• Please arrive 15-20 minutes before the event starts',
        '• Bring this ticket and a valid ID for verification',
        '• Present the QR code at the entrance for quick check-in',
        '• Keep this ticket throughout the event for re-entry',
        '• Follow all event-specific guidelines and protocols'
      ];
      
      const instructions = ticketData.instructions || defaultInstructions;
      let yPos = 150;
      
      instructions.forEach((instruction, index) => {
        if (yPos < 180) { // Ensure we don't overlap with QR code
          doc.text(instruction, 20, yPos);
          yPos += 7;
        }
      });
      
      // Footer
      doc.setFillColor(243, 244, 246); // lightGray
      doc.rect(0, pageHeight - 25, pageWidth, 25, 'F');
      
      doc.setFontSize(8);
      doc.setTextColor(107, 114, 128); // gray-500
      doc.text('Generated by EventValidate - AI-Powered Event Management', 20, pageHeight - 15);
      doc.text('For support: admin@eventifyai.com', 20, pageHeight - 8);
      
      // Timestamp
      const timestamp = new Date().toLocaleString();
      doc.text(`Generated: ${timestamp}`, pageWidth - 80, pageHeight - 8);
      
      // Security watermark
      doc.setTextColor(200, 200, 200, 0.3);
      doc.setFontSize(40);
      doc.text('VALID TICKET', pageWidth / 2 - 30, pageHeight / 2, { angle: -45 });
      
      return Buffer.from(doc.output('arraybuffer'));
      
    } catch (error) {
      console.error('Error generating PDF ticket:', error);
      throw new Error('Failed to generate PDF ticket');
    }
  }

  /**
   * Generate registration confirmation PDF
   */
  async generateRegistrationConfirmation(registrationData: any): Promise<Buffer> {
    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.getWidth();
      
      // Header
      doc.setFillColor(79, 70, 229);
      doc.rect(0, 0, pageWidth, 25, 'F');
      
      doc.setTextColor(255, 255, 255);
      doc.setFontSize(18);
      doc.setFont('helvetica', 'bold');
      doc.text('Registration Confirmation', 20, 16);
      
      // Reset text color
      doc.setTextColor(55, 65, 81);
      
      // Confirmation details
      doc.setFontSize(16);
      doc.setFont('helvetica', 'bold');
      doc.text('Thank you for registering!', 20, 45);
      
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.text(`Registration ID: ${registrationData.registrationId}`, 20, 60);
      doc.text(`Event: ${registrationData.eventName}`, 20, 70);
      doc.text(`Participant: ${registrationData.participantName}`, 20, 80);
      doc.text(`Registration Date: ${new Date().toLocaleDateString()}`, 20, 90);
      
      // Event details
      doc.setFillColor(243, 244, 246);
      doc.rect(20, 100, pageWidth - 40, 50, 'F');
      doc.rect(20, 100, pageWidth - 40, 50, 'S');
      
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('Event Information', 25, 115);
      
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(10);
      doc.text(`Date: ${registrationData.eventDate}`, 25, 125);
      doc.text(`Time: ${registrationData.eventTime}`, 25, 135);
      doc.text(`Location: ${registrationData.eventLocation}`, 25, 145);
      
      // Next steps
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.text('What happens next?', 20, 170);
      
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(10);
      doc.text('• You will receive your event ticket via email', 20, 180);
      doc.text('• Check your email for event updates and reminders', 20, 190);
      doc.text('• Arrive early on the event day for smooth check-in', 20, 200);
      
      return Buffer.from(doc.output('arraybuffer'));
      
    } catch (error) {
      console.error('Error generating registration confirmation PDF:', error);
      throw new Error('Failed to generate registration confirmation PDF');
    }
  }
}

// Export singleton instance
export const pdfService = new PDFService();